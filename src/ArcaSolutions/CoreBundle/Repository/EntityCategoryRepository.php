<?php

namespace ArcaSolutions\CoreBundle\Repository;

use ArcaSolutions\CoreBundle\Interfaces\EntityCategoryRepositoryInterface;
use Doctrine\ORM\EntityRepository;

/**
 * BaseModule
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityCategoryRepository extends EntityRepository implements EntityCategoryRepositoryInterface
{
    /**
     * @var string
     */
    protected $activeItemsNameField = '';

    /**
     * @var int Default 20
     */
    protected $max_items = 20;

    /**
     * {@inheritdoc}
     */
    public function getParentCategories($featured = true)
    {
        if (empty($this->activeItemsNameField)) {
            throw new \Exception('You must populate activeItemsNameField.');
        }

        return $this->createQueryBuilder('q')
            ->where('q.categoryId = :category')
            ->andWhere('q.' . $this->activeItemsNameField . ' > :active')
            ->andWhere('q.featured = :featured')
            ->andWhere('q.enabled = :enabled')
            ->setParameter('category', 0)
            ->setParameter('active', 0)
            ->setParameter('featured', $featured ? 'y' : 'n')
            ->setParameter('enabled', 'y')
            ->orderBy('q.' . $this->activeItemsNameField, 'DESC')
            ->orderBy('q.title', 'ASC')
            ->setMaxResults($this->max_items)
            ->getQuery()
            ->getResult();
    }

    public function getAllParent()
    {
        return $this->createQueryBuilder('c')
            ->where('c.categoryId = :category')
            ->andWhere('c.enabled = :enabled')
            ->setParameter(':category', 0)
            ->setParameter(':enabled', 'y')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return string
     */
    public function getActiveItemsNameField()
    {
        return $this->activeItemsNameField;
    }

    /**
     * @param string $activeItemsNameField
     */
    public function setActiveItemsNameField($activeItemsNameField)
    {
        $this->activeItemsNameField = $activeItemsNameField;
    }

    /**
     * @return mixed
     */
    public function getMaxItems()
    {
        return $this->max_items;
    }

    /**
     * @param mixed $max_items
     */
    public function setMaxItems($max_items)
    {
        if (is_int($max_items)) {
            $this->max_items = $max_items;
        }
    }
}
